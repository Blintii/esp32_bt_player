
option {
    background-color: var(--varColorDark);
    color: var(--varColorText);
}

option:hover {
    background-color: var(--varColorMain);
}

option:checked {
    background-color: var(--varColorBright);
}

#pageHeader {
    font-size: 2em;
    font-weight: bold;
    padding: .5em;
    position: sticky;
    top: 0;
    margin: -.5em -.5em 1em -.5em;
    z-index: 10;
    text-align: center;
}

#contentContainer {
    display: flex;
    flex-flow: wrap;
    justify-content: center;
    gap: .8em;
    filter: drop-shadow(0 0 1.5em rgba(0, 0, 0, .4));
}

#contentContainer > * {
    margin: 1em 1em 3em 1em;
    flex-shrink: 0;
    width: 20em;
    padding: .25em;
    display: flex;
    flex-direction: column;
}

#deleteDialog {
    margin-top: 10vh;
    background-color: var(--varColorBG_1);
    color: var(--varColorText);
    border-color: var(--varColorMain);
    border-width: .2em;
    border-style: solid;
    border-radius: 1.6em;
    filter: drop-shadow(0 0 1em rgb(0, 0, 0))
        drop-shadow(0 0 4em rgb(0, 0, 0));
    transition: all 300ms ease-in-out;
}

#deleteDialog:not(.openedDialog) {
    transform: scale(0);
}

#deleteDialog.openedDialog {
    transform: scale(1);
}

#deleteDialog:focus {
    outline: none;
}

#deleteDialog::backdrop {
    transition: all 300ms ease-in-out;
    background: radial-gradient(closest-side, rgba(128, 0, 0, .2) 60%, rgba(180, 0, 0, .5) 160%);
    opacity: 0;
}

#deleteDialog.openedDialog::backdrop {
    opacity: 1;
}

#deleteDialogText {
    font-size: 1.6em;
    margin-bottom: 1rem;
}

.deleteDialogButtons {
    display: flex;
    flex-flow: row wrap;
    column-gap: 1em;
}

.deleteDialogButtons button {
    font-size: 1.2em;
    padding: .6rem;
    margin: .2rem;
    background: none;
    color: var(--varColorText);
    border-color: var(--varColorBright);
    border-width: .15em;
    border-style: solid;
    border-radius: .8em;
    outline: none;
}

.deleteDialogButtons button:focus {
    background: var(--varColorBright);
}

#deleteDialogConfirm {
    background: rgb(180, 0, 0);
    border-color: rgb(180, 0, 0);
    font-weight: bold;
}

#deleteDialogConfirm:focus {
    background: rgb(255, 20, 10);
    border-color: rgb(255, 20, 10);
}

.itemBox {
    border-radius: 1.5em;
    overflow: hidden;
    z-index: -1;
}

.itemHeaderStrip {
    font-size: 1.5625em;
    padding: .4em;
    text-align: center;
}

.itemHeaderZone {
    font-size: 1.25em;
    padding: .2em 1em;
}

.zoneTitleParentRef {
    color: var(--varColorTextDark);
    margin-left: .5em;
}

.itemBody {
    padding: 1em .75em;
    font-size: 1.25em;
    outline: var(--varColorMain) solid 8em;
    border-radius: 1em;
    flex-grow: 1;
    margin-top: .25em;
    position: relative;
    z-index: -1;
}

.flexBox {
    display: flex;
    column-gap: .25em;
}

.equalFlexBox {
    justify-content: space-between;
}

.bottomMarginBox {
    margin-bottom: 1em;
}

.separator {
    height: .25em;
    border-radius: 1em;
    background: var(--varColorMain);
}

.iconClipPath {
    width: 1.2em;
    height: 1.2em;
    background: var(--varColorText);
}

.buttonIcon {
    all: unset;
    cursor: pointer;
}

.buttonDisabled .iconClipPath {
    background: var(--varColorDark);
}

.buttonIcon.buttonDisabled {
    cursor: not-allowed;
}

.typerBox {
    cursor: text;
}

.typerBox * {
    transition: all 300ms ease-in-out;
}

.typerFrame {
    height: 1.2em;
    display: flex;
    column-gap: .2em;
    border-radius: .4em;
    outline-width: .15em;
    outline-style: solid;
    outline-color: transparent;
}

.typerText {
    display: inline-block;
    background: none;
    color: inherit;
    border: none;
    padding: 0;
    margin: 0;
    outline: none;
    min-width: .1em;
    text-align: right;
}

.typerTextDecor {
    vertical-align: top;
}

.typerText:focus {
    min-width: 1.8em;
}

.typerFrame:has(.typerText:focus) {
    outline-color: var(--varColorText);
    padding: 0 .25em;
}

.typerFrame:has(.typerText:focus) .typerTextDecor {
    color: var(--varColorBright);
}

.typerFrame:has(.typerText:focus) .typerText {
    filter: drop-shadow(0 0 .4em rgb(255, 254, 250))
        drop-shadow(0 0 .6em rgb(255, 254, 250));
}

.typerBox:has(.typerText:focus) .iconClipPath {
    background-color: var(--varColorBright);
}

.RGBOrderBox, .stripSizeBox {
    font-size: 1.25em;
}

.zoneType {
    background-color: transparent;
    color: var(--varColorText);
    padding: 0 .2em;
    border-radius: .6em;
    border-style: none;
    font-size: .8em;
    outline-width: .15em;
    outline-style: solid;
    outline-color: var(--varColorMain);
}

.stripZoneListItem {
    margin: .25em 0 .25em 1em;
}

.color-picker {
    position: relative;
    padding: 0;
    margin-top: .4em;
}

.color-circle {
    width: var(--var-color-picker-size);
    height: var(--var-color-picker-size);
    clip-path: url(#path-circle);
    background: conic-gradient(red, yellow, lime, aqua, blue, magenta, red);
}

.color-triangle {
    --var-cur-color: red;
    position: absolute;
    top: 0;
    left: 0;
    width: var(--var-color-picker-size);
    height: var(--var-color-picker-size);
    clip-path: url(#path-triangle);
    background: conic-gradient(white 30deg, var(--var-cur-color) 30deg, var(--var-cur-color) 150deg, black 150deg, black 270deg, white 270deg);
    filter: blur(calc(var(--var-color-picker-size)*0.13));
    transform: rotate(-90deg);
}

.pointer-dot {
    --var-gradient-offset: 14%;
    --var-pointer-size: calc(var(--var-color-picker-size)/10);
    position: absolute;
    width: var(--var-pointer-size);
    height: var(--var-pointer-size);
    border-radius: 50%;
    background: radial-gradient(transparent calc(var(--var-gradient-offset) + 34%), white calc(var(--var-gradient-offset) + 37%), black 68%, transparent 71%);
    z-index: 99;
    transition: transform 160ms linear;
    pointer-events: none;
}

.hue-pointer {
    top: calc(var(--var-color-picker-size)*0.017);
    left: calc(var(--var-color-picker-size)*0.45);
}

.val-pointer {
    top: calc(var(--var-color-picker-size)*0.425);
    left: calc(var(--var-color-picker-size)*0.57);
}

.color-hue-selecting > .hue-pointer {
    --var-gradient-offset: 2%;
    transform: scale(125%);
}

.color-val-selecting > .val-pointer {
    --var-gradient-offset: 2%;
    transform: scale(125%);
}

/*

.uiCheckBox {
    cursor: pointer;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    transition: filter 300ms ease-in-out;
}

.uiCheckBoxFig {
    width: 1.1em;
    height: 1.1em;
    border: solid .1em;
    border-color: var(--varColorMain);
    border-radius: .3em;
    overflow: hidden;
    position: relative;
    transition: border-color 300ms ease-in-out;
}

.uiCheckBoxFig > * {
    clip-path: url(#path-checkMark);
    border-radius: .3em;
    position: absolute;
    left: -.08em;
    top: -.08em;
    right: -.06em;
    bottom: -.06em;
    transform: scale(0) rotateZ(180deg);
    transition: all 420ms cubic-bezier(0, .02, 0, 1);
    background-color: var(--varColorBright);
}

.uiCheckBoxText {
    color: var(--varColorMain);
    margin: 0 .6em 0 .3em;
    transition: color 300ms ease-in-out;
}

.uiCheckBox.checked > .uiCheckBoxFig {
    border-color: var(--varColorBright);
}

.uiCheckBox.checked > .uiCheckBoxFig > * {
    transition: all 420ms cubic-bezier(.54, .01, 0, 1.49);
    transform: scale(1) rotateZ(0);
}

.uiCheckBox.checked:not(.deniedCheckBox) > .uiCheckBoxText {
    color: var(--varColorText);
    text-shadow: 0 0 .6em rgb(255, 254, 250);
}

.uiCheckBox.checked:not(.deniedCheckBox) {
    filter: drop-shadow(0 0 .3em rgba(255, 254, 250, .4));
}

.uiCheckBox.deniedCheckBox {
    cursor: not-allowed;
}

.uiCheckBox.deniedCheckBox > .uiCheckBoxFig {
    border-color: var(--varColorDark);
}

.uiCheckBox.deniedCheckBox.checked > .uiCheckBoxFig > * {
    background-color: var(--varColorDark);
}

.uiCheckBox.deniedCheckBox > .uiCheckBoxText {
    color: var(--varColorDark);
}

@media (max-width: 49.5em) {
    .stripBox {
        flex-grow: .4;
    }
}

*/
